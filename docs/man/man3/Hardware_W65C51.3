.TH "Hardware.W65C51" 3 "Wed Sep 28 2022" "Version beta" "WolfNet 6502 WorkBench Computer Emulator" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Hardware.W65C51 \- An implementation of a \fBW65C51\fP ACIA\&.   

.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBW65C51\fP (\fBW65C02\fP processor, byte offset)"
.br
.ti -1c
.RI "void \fBReset\fP ()"
.br
.ti -1c
.RI "void \fBInit\fP (string port)"
.br
.RI "Default Constructor, Instantiates a new instance of COM Port I/O\&.  "
.ti -1c
.RI "void \fBInit\fP (string port, int baudRate)"
.br
.RI "Default Constructor, Instantiates a new instance of COM Port I/O\&.  "
.ti -1c
.RI "void \fBFini\fP ()"
.br
.RI "Called when the window is closed\&.  "
.ti -1c
.RI "byte \fBRead\fP (int address)"
.br
.RI "Returns the byte at a given address\&.  "
.ti -1c
.RI "void \fBWrite\fP (int address, byte data)"
.br
.RI "Writes data to the given address\&.  "
.ti -1c
.RI "void \fBWriteCOM\fP (byte data)"
.br
.RI "Called in order to write to the serial port\&.  "
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "readonly int \fBdefaultBaudRate\fP = 115200"
.br
.ti -1c
.RI "byte \fBbyteIn\fP"
.br
.in -1c
.SS "Properties"

.in +1c
.ti -1c
.RI "byte[] \fBMemory\fP\fC [get, set]\fP"
.br
.ti -1c
.RI "bool \fBIsEnabled\fP\fC [get, set]\fP"
.br
.ti -1c
.RI "SerialPort \fBObject\fP\fC [get, set]\fP"
.br
.ti -1c
.RI "string \fBObjectName\fP\fC [get, set]\fP"
.br
.ti -1c
.RI "\fBW65C02\fP \fBProcessor\fP\fC [get, set]\fP"
.br
.ti -1c
.RI "BackgroundWorker \fB_backgroundWorker\fP\fC [get, set]\fP"
.br
.ti -1c
.RI "int \fBOffset\fP\fC [get, set]\fP"
.br
.ti -1c
.RI "int \fBLength\fP\fC [get, set]\fP"
.br
.ti -1c
.RI "bool \fBDataRead\fP\fC [get, set]\fP"
.br
.ti -1c
.RI "bool \fBEchoMode\fP\fC [get, set]\fP"
.br
.ti -1c
.RI "bool \fBInterruptDisabled\fP\fC [get, set]\fP"
.br
.ti -1c
.RI "bool \fBInterrupted\fP\fC [get, set]\fP"
.br
.ti -1c
.RI "bool \fBOverrun\fP\fC [get, set]\fP"
.br
.ti -1c
.RI "bool \fBParityEnabled\fP\fC [get, set]\fP"
.br
.ti -1c
.RI "bool \fBReceiverFull\fP\fC [get, set]\fP"
.br
.ti -1c
.RI "byte \fBRtsControl\fP\fC [get, set]\fP"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "void \fBComInit\fP (SerialPort serialPort)"
.br
.RI "Called whenever the ACIA is initialized\&.  "
.ti -1c
.RI "void \fBComFini\fP (SerialPort serialPort)"
.br
.RI "Called when the window is closed\&.  "
.ti -1c
.RI "void \fBSerialDataReceived\fP (object sender, SerialDataReceivedEventArgs e)"
.br
.RI "Called whenever SerialDataReceivedEventHandler event occurs\&.  "
.ti -1c
.RI "void \fBHardwarePreWrite\fP (int address, byte data)"
.br
.ti -1c
.RI "void \fBHardwarePreRead\fP (int address)"
.br
.ti -1c
.RI "void \fBCommandRegister\fP (byte data)"
.br
.ti -1c
.RI "void \fBCommandRegisterUpdate\fP ()"
.br
.ti -1c
.RI "void \fBControlRegister\fP (byte data)"
.br
.ti -1c
.RI "void \fBControlRegisterUpdate\fP ()"
.br
.ti -1c
.RI "void \fBStatusRegisterUpdate\fP ()"
.br
.ti -1c
.RI "void \fBBackgroundWorkerDoWork\fP (object sender, DoWorkEventArgs e)"
.br
.in -1c
.SH "Detailed Description"
.PP 
An implementation of a \fBW65C51\fP ACIA\&.  
.PP
Definition at line \fB12\fP of file \fBW65C51\&.cs\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Hardware\&.W65C51\&.W65C51 (\fBW65C02\fP processor, byte offset)\fC [inline]\fP"

.PP
Definition at line \fB40\fP of file \fBW65C51\&.cs\fP\&.
.PP
.nf
41         {
42             if (offset > MemoryMap\&.DeviceArea\&.Length)
43                 throw new ArgumentException(String\&.Format("The offset: {0} is greater than the device area: {1}", offset, MemoryMap\&.DeviceArea\&.Length));
44 
45             Processor = processor;
46 
47             Offset = MemoryMap\&.DeviceArea\&.Offset | offset;
48             Length = 0x04;
49             Memory = new byte[Length + 1];
50 
51             _backgroundWorker = new BackgroundWorker
52             {
53                 WorkerSupportsCancellation = true
54             };
55             _backgroundWorker\&.DoWork += BackgroundWorkerDoWork;
56             _backgroundWorker\&.RunWorkerAsync();
57         }
.fi
.SH "Member Function Documentation"
.PP 
.SS "void Hardware\&.W65C51\&.BackgroundWorkerDoWork (object sender, DoWorkEventArgs e)\fC [inline]\fP, \fC [private]\fP"

.PP
Definition at line \fB677\fP of file \fBW65C51\&.cs\fP\&.
.PP
.nf
678         {
679             var worker = sender as BackgroundWorker;
680 
681             while (true)
682             {
683                 if (worker != null && worker\&.CancellationPending)
684                 {
685                     e\&.Cancel = true;
686                     return;
687                 }
688 
689                 if (Processor\&.isRunning)
690                 {
691                     if (ReceiverFull || Overrun)
692                     {
693                         Memory[Offset + 1] = (byte)(Memory[Offset + 1] | 0x80);
694                         Interrupted = true;
695                         Processor\&.InterruptRequest();
696                     }
697 
698                     if (DataRead)
699                     {
700                         ReceiverFull = false;
701                         Interrupted = false;
702                         Overrun = false;
703                         DataRead = false;
704                     }
705                 }
706             }
707         }
.fi
.SS "void Hardware\&.W65C51\&.ComFini (SerialPort serialPort)\fC [inline]\fP, \fC [private]\fP"

.PP
Called when the window is closed\&.  
.PP
\fBParameters\fP
.RS 4
\fIserialPort\fP SerialPort Object to close
.RE
.PP

.PP
Definition at line \fB195\fP of file \fBW65C51\&.cs\fP\&.
.PP
.nf
196         {
197             if (serialPort != null)
198             {
199                 serialPort\&.Close();
200             }
201 
202             _backgroundWorker\&.CancelAsync();
203             _backgroundWorker\&.DoWork -= BackgroundWorkerDoWork;
204         }
.fi
.SS "void Hardware\&.W65C51\&.ComInit (SerialPort serialPort)\fC [inline]\fP, \fC [private]\fP"

.PP
Called whenever the ACIA is initialized\&.  
.PP
\fBParameters\fP
.RS 4
\fIserialPort\fP SerialPort object to initialize\&.
.RE
.PP

.PP
Definition at line \fB147\fP of file \fBW65C51\&.cs\fP\&.
.PP
.nf
148         {
149             try
150             {
151                 serialPort\&.Open();
152             }
153             catch (UnauthorizedAccessException w)
154             {
155                 FileStream file = new FileStream(FileLocations\&.ErrorFile, FileMode\&.OpenOrCreate, FileAccess\&.ReadWrite);
156                 StreamWriter stream = new StreamWriter(file);
157                 stream\&.WriteLine(w\&.Message);
158                 stream\&.WriteLine(w\&.Source);
159                 stream\&.Flush();
160                 file\&.Flush();
161                 stream\&.Close();
162                 file\&.Close();
163                 return;
164             }
165             serialPort\&.ReadTimeout = 50;
166             serialPort\&.WriteTimeout = 50;
167             serialPort\&.DataReceived += new SerialDataReceivedEventHandler(SerialDataReceived);
168             try
169             {
170                 serialPort\&.Write("---------------------------\r\n");
171                 serialPort\&.Write(" WolfNet 6502 WBC Emulator\r\n");
172                 serialPort\&.Write("---------------------------\r\n");
173                 serialPort\&.Write("\r\n");
174             }
175             catch (TimeoutException t)
176             {
177                 _ = t;
178                 FileStream file = new FileStream(FileLocations\&.ErrorFile, FileMode\&.OpenOrCreate, FileAccess\&.ReadWrite);
179                 StreamWriter stream = new StreamWriter(file);
180                 stream\&.WriteLine("Read/Write error: Port timed out!");
181                 stream\&.WriteLine("Please ensure all cables are connected properly!");
182                 stream\&.Flush();
183                 file\&.Flush();
184                 stream\&.Close();
185                 file\&.Close();
186                 return;
187             }
188         }
.fi
.SS "void Hardware\&.W65C51\&.CommandRegister (byte data)\fC [inline]\fP, \fC [private]\fP"

.PP
Definition at line \fB296\fP of file \fBW65C51\&.cs\fP\&.
.PP
.nf
297         {
298             byte test = (byte)(data & 0x20);
299             if (test == 0x20)
300             {
301                 throw new ArgumentException("Parity must NEVER be enabled!");
302             }
303 
304             test = (byte)(data & 0x10);
305             if (test == 0x10)
306             {
307                 EchoMode = true;
308             }
309             else
310             {
311                 EchoMode = false;
312             }
313 
314             test = (byte)(data & 0x0C);
315             if (test == 0x00)
316             {
317                 Object\&.Handshake = Handshake\&.None;
318                 Object\&.RtsEnable = true;
319                 Object\&.Handshake = Handshake\&.RequestToSend;
320             }
321             else if (test == 0x04)
322             {
323                 Object\&.Handshake = Handshake\&.None;
324                 Object\&.RtsEnable = false;
325             }
326             else if ((test == 0x08) || (test == 0x0C))
327             {
328                 throw new NotImplementedException("This cannot be emulated on windows!");
329             }
330             else
331             {
332                 throw new ArgumentOutOfRangeException("RtsControl is invalid!");
333             }
334 
335             test = (byte)(data & 0x02);
336             if (test == 0x02)
337             {
338                 InterruptDisabled = true;
339             }
340             else
341             {
342                 InterruptDisabled = false;
343             }
344 
345             test = (byte)(data & 0x01);
346             if (test == 0x01)
347             {
348                 Object\&.DtrEnable = true;
349             }
350             else
351             {
352                 Object\&.DtrEnable = false;
353             }
354         }
.fi
.SS "void Hardware\&.W65C51\&.CommandRegisterUpdate ()\fC [inline]\fP, \fC [private]\fP"

.PP
Definition at line \fB356\fP of file \fBW65C51\&.cs\fP\&.
.PP
.nf
357         {
358             byte data = Memory[Offset + 2];
359 
360             if (ParityEnabled)
361             {
362                 data |= 0x20;
363             }
364             else
365             {
366                 data &= 0xD0;
367             }
368 
369             if (EchoMode)
370             {
371                 data |= 0x10;
372             }
373             else
374             {
375                 data &= 0xE0;
376             }
377 
378             data &= RtsControl;
379 
380             if (InterruptDisabled)
381             {
382                 data |= 0x02;
383             }
384             else
385             {
386                 data &= 0x0D;
387             }
388             if (Object\&.DtrEnable)
389             {
390                 data |= 0x01;
391             }
392             else
393             {
394                 data &= 0x0E;
395             }
396 
397             Memory[Offset + 2] = data;
398         }
.fi
.SS "void Hardware\&.W65C51\&.ControlRegister (byte data)\fC [inline]\fP, \fC [private]\fP"

.PP
Definition at line \fB400\fP of file \fBW65C51\&.cs\fP\&.
.PP
.nf
401         {
402             byte test = (byte)(data & 0x80);
403             if (test == 0x80)
404             {
405                 test = (byte)(data & 0x60);
406                 if (test == 0x60)
407                 {
408                     Object\&.StopBits = StopBits\&.OnePointFive;
409                 }
410                 else
411                 {
412                     Object\&.StopBits = StopBits\&.Two;
413                 }
414             }
415             else
416             {
417                 Object\&.StopBits = StopBits\&.One;
418             }
419 
420             test = (byte)(data & 0x60);
421             if (test == 0x20)
422             {
423                 Object\&.DataBits = 7;
424             }
425             else if (test == 0x40)
426             {
427                 Object\&.DataBits = 6;
428             }
429             else if (test == 0x60)
430             {
431                 Object\&.DataBits = 5;
432             }
433             else
434             {
435                 Object\&.DataBits = 8;
436             }
437 
438             test = (byte)(data & 0x10);
439             if (!(test == 0x10))
440             {
441                 throw new ArgumentException("External clock rate not available on the WolfNet 65C02 WBC!");
442             }
443 
444             test = (byte)(data & 0x0F);
445             if (test == 0x00)
446             {
447                 Object\&.BaudRate = 115200;
448             }
449             else if (test == 0x01)
450             {
451                 Object\&.BaudRate = 50;
452             }
453             else if (test == 0x02)
454             {
455                 Object\&.BaudRate = 75;
456             }
457             else if (test == 0x03)
458             {
459                 Object\&.BaudRate = 110;
460             }
461             else if (test == 0x04)
462             {
463                 Object\&.BaudRate = 135;
464             }
465             else if (test == 0x05)
466             {
467                 Object\&.BaudRate = 150;
468             }
469             else if (test == 0x06)
470             {
471                 Object\&.BaudRate = 300;
472             }
473             else if (test == 0x07)
474             {
475                 Object\&.BaudRate = 600;
476             }
477             else if (test == 0x08)
478             {
479                 Object\&.BaudRate = 1200;
480             }
481             else if (test == 0x09)
482             {
483                 Object\&.BaudRate = 1800;
484             }
485             else if (test == 0x0A)
486             {
487                 Object\&.BaudRate = 2400;
488             }
489             else if (test == 0x0B)
490             {
491                 Object\&.BaudRate = 3600;
492             }
493             else if (test == 0x0C)
494             {
495                 Object\&.BaudRate = 4800;
496             }
497             else if (test == 0x0D)
498             {
499                 Object\&.BaudRate = 7200;
500             }
501             else if (test == 0x0E)
502             {
503                 Object\&.BaudRate = 9600;
504             }
505             else
506             {
507                 Object\&.BaudRate = 19200;
508             }
509         }
.fi
.SS "void Hardware\&.W65C51\&.ControlRegisterUpdate ()\fC [inline]\fP, \fC [private]\fP"

.PP
Definition at line \fB511\fP of file \fBW65C51\&.cs\fP\&.
.PP
.nf
512         {
513             byte controlRegister = Memory[Offset + 3];
514 
515             if (Object\&.StopBits == StopBits\&.Two)
516             {
517                 controlRegister |= 0x80;
518             }
519             else if ((Object\&.StopBits == StopBits\&.OnePointFive) && (Object\&.DataBits == 5) || (Object\&.StopBits == StopBits\&.One))
520             {
521                 controlRegister &= 0x7F;
522             }
523             else
524             {
525                 throw new ArgumentOutOfRangeException("StopBits or combination of StopBits and DataBits is invalid!");
526             }
527 
528             if (Object\&.DataBits == 8)
529             {
530                 controlRegister &= 0x9F;
531             }
532             else if (Object\&.DataBits == 7)
533             {
534                 controlRegister |= 0x20;
535             }
536             else if (Object\&.DataBits == 6)
537             {
538                 controlRegister |= 0x40;
539             }
540             else if (Object\&.DataBits == 5)
541             {
542                 controlRegister |= 0x60;
543             }
544             else
545             {
546                 throw new ArgumentOutOfRangeException("DataBits is out of range!");
547             }
548 
549             if (Object\&.BaudRate == 115200)
550             {
551                 controlRegister &= 0xF0;
552             }
553             else if (Object\&.BaudRate == 50)
554             {
555                 controlRegister |= 0x01;
556             }
557             else if (Object\&.BaudRate == 75)
558             {
559                 controlRegister |= 0x02;
560             }
561             else if (Object\&.BaudRate == 110)
562             {
563                 controlRegister |= 0x03;
564             }
565             else if (Object\&.BaudRate == 135)
566             {
567                 controlRegister |= 0x04;
568             }
569             else if (Object\&.BaudRate == 150)
570             {
571                 controlRegister |= 0x05;
572             }
573             else if (Object\&.BaudRate == 300)
574             {
575                 controlRegister |= 0x06;
576             }
577             else if (Object\&.BaudRate == 600)
578             {
579                 controlRegister |= 0x07;
580             }
581             else if (Object\&.BaudRate == 1200)
582             {
583                 controlRegister |= 0x08;
584             }
585             else if (Object\&.BaudRate == 1800)
586             {
587                 controlRegister |= 0x09;
588             }
589             else if (Object\&.BaudRate == 2400)
590             {
591                 controlRegister |= 0x0A;
592             }
593             else if (Object\&.BaudRate == 3600)
594             {
595                 controlRegister |= 0x0B;
596             }
597             else if (Object\&.BaudRate == 4800)
598             {
599                 controlRegister |= 0x0C;
600             }
601             else if (Object\&.BaudRate == 7200)
602             {
603                 controlRegister |= 0x0D;
604             }
605             else if (Object\&.BaudRate == 9600)
606             {
607                 controlRegister |= 0x0E;
608             }
609             else if (Object\&.BaudRate == 19200)
610             {
611                 controlRegister |= 0x0F;
612             }
613             else
614             {
615                 throw new ArgumentOutOfRangeException("BaudRate is outside the range of Baud Rates supported by the W65C51!");
616             }
617 
618             Memory[Offset + 3] = controlRegister;
619         }
.fi
.SS "void Hardware\&.W65C51\&.Fini ()\fC [inline]\fP"

.PP
Called when the window is closed\&.  
.PP
Definition at line \fB94\fP of file \fBW65C51\&.cs\fP\&.
.PP
.nf
95         {
96             ComFini(Object);
97         }
.fi
.SS "void Hardware\&.W65C51\&.HardwarePreRead (int address)\fC [inline]\fP, \fC [private]\fP"

.PP
Definition at line \fB273\fP of file \fBW65C51\&.cs\fP\&.
.PP
.nf
274         {
275             if (address == Offset)
276             {
277                 Interrupted = false;
278                 Overrun = false;
279                 ReceiverFull = false;
280 
281             }
282             else if (address == Offset + 1)
283             {
284                 StatusRegisterUpdate();
285             }
286             else if (address == Offset + 2)
287             {
288                 CommandRegisterUpdate();
289             }
290             else if (address == Offset + 3)
291             {
292                 ControlRegisterUpdate();
293             }
294         }
.fi
.SS "void Hardware\&.W65C51\&.HardwarePreWrite (int address, byte data)\fC [inline]\fP, \fC [private]\fP"

.PP
Definition at line \fB253\fP of file \fBW65C51\&.cs\fP\&.
.PP
.nf
254         {
255             if (address == Offset)
256             {
257                 WriteCOM(data);
258             }
259             else if (address == Offset + 1)
260             {
261                 Reset();
262             }
263             else if (address == Offset + 2)
264             {
265                 CommandRegister(data);
266             }
267             else if (address == Offset + 3)
268             {
269                 ControlRegister(data);
270             }
271         }
.fi
.SS "void Hardware\&.W65C51\&.Init (string port)\fC [inline]\fP"

.PP
Default Constructor, Instantiates a new instance of COM Port I/O\&.  
.PP
\fBParameters\fP
.RS 4
\fIport\fP COM Port to use for I/O
.RE
.PP

.PP
Definition at line \fB69\fP of file \fBW65C51\&.cs\fP\&.
.PP
.nf
70         {
71             Object = new SerialPort(port, defaultBaudRate, Parity\&.None, 8, StopBits\&.One);
72             ObjectName = port;
73 
74             ComInit(Object);
75         }
.fi
.SS "void Hardware\&.W65C51\&.Init (string port, int baudRate)\fC [inline]\fP"

.PP
Default Constructor, Instantiates a new instance of COM Port I/O\&.  
.PP
\fBParameters\fP
.RS 4
\fIport\fP COM Port to use for I/O
.br
\fIbaudRate\fP Baud Rate to use for I/O
.RE
.PP

.PP
Definition at line \fB83\fP of file \fBW65C51\&.cs\fP\&.
.PP
.nf
84         {
85             Object = new SerialPort(port, baudRate, Parity\&.None, 8, StopBits\&.One);
86             ObjectName = port;
87 
88             ComInit(Object);
89         }
.fi
.SS "byte Hardware\&.W65C51\&.Read (int address)\fC [inline]\fP"

.PP
Returns the byte at a given address\&.  
.PP
\fBParameters\fP
.RS 4
\fIaddress\fP 
.RE
.PP
.PP
\fBReturns\fP
.RS 4
the byte being returned
.RE
.PP

.PP
Definition at line \fB106\fP of file \fBW65C51\&.cs\fP\&.
.PP
.nf
107         {
108             HardwarePreRead(address);
109             byte data = Memory[address - Offset];
110             DataRead = true;
111             return data;
112         }
.fi
.SS "void Hardware\&.W65C51\&.Reset ()\fC [inline]\fP"

.PP
Definition at line \fB59\fP of file \fBW65C51\&.cs\fP\&.
.PP
.nf
60         {
61             IsEnabled = false;
62         }
.fi
.SS "void Hardware\&.W65C51\&.SerialDataReceived (object sender, SerialDataReceivedEventArgs e)\fC [inline]\fP, \fC [private]\fP"

.PP
Called whenever SerialDataReceivedEventHandler event occurs\&.  
.PP
\fBParameters\fP
.RS 4
\fIsender\fP 
.br
\fIe\fP 
.RE
.PP

.PP
Definition at line \fB212\fP of file \fBW65C51\&.cs\fP\&.
.PP
.nf
213         {
214             try
215             {
216                 if (EchoMode)
217                 {
218                     WriteCOM(Convert\&.ToByte(Object\&.ReadByte()));
219                 }
220                 else
221                 {
222                     if (!ReceiverFull)
223                     {
224                         ReceiverFull = true;
225                     }
226                     else
227                     {
228                         Overrun = true;
229                     }
230                     Memory[0] = Convert\&.ToByte(Object\&.ReadByte());
231                 }
232 
233                 if (!InterruptDisabled)
234                 {
235                     Interrupted = true;
236                     Processor\&.InterruptRequest();
237                 }
238             }
239             catch (Win32Exception w)
240             {
241                 FileStream file = new FileStream(FileLocations\&.ErrorFile, FileMode\&.OpenOrCreate, FileAccess\&.ReadWrite);
242                 StreamWriter stream = new StreamWriter(file);
243                 stream\&.WriteLine(w\&.Message);
244                 stream\&.WriteLine(w\&.ErrorCode\&.ToString());
245                 stream\&.WriteLine(w\&.Source);
246                 stream\&.Flush();
247                 stream\&.Close();
248                 file\&.Flush();
249                 file\&.Close();
250             }
251         }
.fi
.SS "void Hardware\&.W65C51\&.StatusRegisterUpdate ()\fC [inline]\fP, \fC [private]\fP"

.PP
Definition at line \fB621\fP of file \fBW65C51\&.cs\fP\&.
.PP
.nf
622         {
623             byte statusRegister = Memory[Offset + 1];
624 
625             if (Interrupted)
626             {
627                 statusRegister |= 0x80;
628             }
629             else
630             {
631                 statusRegister &= 0x7F;
632             }
633 
634             if (Object\&.DsrHolding == false)
635             {
636                 statusRegister |= 0x40;
637             }
638             else
639             {
640                 statusRegister &= 0xBF;
641             }
642 
643             if (Object\&.CDHolding)
644             {
645                 statusRegister |= 0x20;
646             }
647             else
648             {
649                 statusRegister &= 0xDF;
650             }
651 
652             statusRegister |= 0x10;
653 
654             if (ReceiverFull)
655             {
656                 statusRegister |= 0x08;
657             }
658             else
659             {
660                 statusRegister &= 0xF7;
661             }
662 
663             if (Overrun)
664             {
665                 statusRegister |= 0x04;
666             }
667             else
668             {
669                 statusRegister &= 0xFB;
670             }
671 
672             statusRegister &= 0xFC;
673 
674             Memory[Offset + 1] = statusRegister;
675         }
.fi
.SS "void Hardware\&.W65C51\&.Write (int address, byte data)\fC [inline]\fP"

.PP
Writes data to the given address\&.  
.PP
\fBParameters\fP
.RS 4
\fIaddress\fP The address to write data to
.br
\fIdata\fP The data to write
.RE
.PP

.PP
Definition at line \fB120\fP of file \fBW65C51\&.cs\fP\&.
.PP
.nf
121         {
122             HardwarePreWrite(address, data);
123             if (!((address == Offset) || (address == Offset + 1)))
124             {
125                 Memory[address - Offset] = data;
126             }
127         }
.fi
.SS "void Hardware\&.W65C51\&.WriteCOM (byte data)\fC [inline]\fP"

.PP
Called in order to write to the serial port\&.  
.PP
\fBParameters\fP
.RS 4
\fIdata\fP Byte of data to send
.RE
.PP

.PP
Definition at line \fB134\fP of file \fBW65C51\&.cs\fP\&.
.PP
.nf
135         {
136             byte[] writeByte = new byte[] { data };
137             Object\&.Write(writeByte, 0, 1);
138         }
.fi
.SH "Member Data Documentation"
.PP 
.SS "byte Hardware\&.W65C51\&.byteIn"

.PP
Definition at line \fB16\fP of file \fBW65C51\&.cs\fP\&.
.SS "readonly int Hardware\&.W65C51\&.defaultBaudRate = 115200"

.PP
Definition at line \fB15\fP of file \fBW65C51\&.cs\fP\&.
.SH "Property Documentation"
.PP 
.SS "BackgroundWorker Hardware\&.W65C51\&._backgroundWorker\fC [get]\fP, \fC [set]\fP, \fC [private]\fP"

.PP
Definition at line \fB25\fP of file \fBW65C51\&.cs\fP\&.
.PP
.nf
25 { get; set; }
.fi
.SS "bool Hardware\&.W65C51\&.DataRead\fC [get]\fP, \fC [set]\fP, \fC [private]\fP"

.PP
Definition at line \fB29\fP of file \fBW65C51\&.cs\fP\&.
.PP
.nf
29 { get; set; }
.fi
.SS "bool Hardware\&.W65C51\&.EchoMode\fC [get]\fP, \fC [set]\fP, \fC [private]\fP"

.PP
Definition at line \fB30\fP of file \fBW65C51\&.cs\fP\&.
.PP
.nf
30 { get; set; }
.fi
.SS "bool Hardware\&.W65C51\&.InterruptDisabled\fC [get]\fP, \fC [set]\fP, \fC [private]\fP"

.PP
Definition at line \fB31\fP of file \fBW65C51\&.cs\fP\&.
.PP
.nf
31 { get; set; }
.fi
.SS "bool Hardware\&.W65C51\&.Interrupted\fC [get]\fP, \fC [set]\fP, \fC [private]\fP"

.PP
Definition at line \fB32\fP of file \fBW65C51\&.cs\fP\&.
.PP
.nf
32 { get; set; }
.fi
.SS "bool Hardware\&.W65C51\&.IsEnabled\fC [get]\fP, \fC [set]\fP"

.PP
Definition at line \fB21\fP of file \fBW65C51\&.cs\fP\&.
.PP
.nf
21 { get; set; }
.fi
.SS "int Hardware\&.W65C51\&.Length\fC [get]\fP, \fC [set]\fP"

.PP
Definition at line \fB27\fP of file \fBW65C51\&.cs\fP\&.
.PP
.nf
27 { get; set; }
.fi
.SS "byte [] Hardware\&.W65C51\&.Memory\fC [get]\fP, \fC [set]\fP"

.PP
Definition at line \fB20\fP of file \fBW65C51\&.cs\fP\&.
.PP
.nf
20 { get; set; }
.fi
.SS "SerialPort Hardware\&.W65C51\&.Object\fC [get]\fP, \fC [set]\fP"

.PP
Definition at line \fB22\fP of file \fBW65C51\&.cs\fP\&.
.PP
.nf
22 { get; set; }
.fi
.SS "string Hardware\&.W65C51\&.ObjectName\fC [get]\fP, \fC [set]\fP"

.PP
Definition at line \fB23\fP of file \fBW65C51\&.cs\fP\&.
.PP
.nf
23 { get; set; }
.fi
.SS "int Hardware\&.W65C51\&.Offset\fC [get]\fP, \fC [set]\fP"

.PP
Definition at line \fB26\fP of file \fBW65C51\&.cs\fP\&.
.PP
.nf
26 { get; set; }
.fi
.SS "bool Hardware\&.W65C51\&.Overrun\fC [get]\fP, \fC [set]\fP, \fC [private]\fP"

.PP
Definition at line \fB33\fP of file \fBW65C51\&.cs\fP\&.
.PP
.nf
33 { get; set; }
.fi
.SS "bool Hardware\&.W65C51\&.ParityEnabled\fC [get]\fP, \fC [set]\fP, \fC [private]\fP"

.PP
Definition at line \fB34\fP of file \fBW65C51\&.cs\fP\&.
.PP
.nf
34 { get; set; }
.fi
.SS "\fBW65C02\fP Hardware\&.W65C51\&.Processor\fC [get]\fP, \fC [set]\fP, \fC [private]\fP"

.PP
Definition at line \fB24\fP of file \fBW65C51\&.cs\fP\&.
.PP
.nf
24 { get; set; }
.fi
.SS "bool Hardware\&.W65C51\&.ReceiverFull\fC [get]\fP, \fC [set]\fP, \fC [private]\fP"

.PP
Definition at line \fB35\fP of file \fBW65C51\&.cs\fP\&.
.PP
.nf
35 { get; set; }
.fi
.SS "byte Hardware\&.W65C51\&.RtsControl\fC [get]\fP, \fC [set]\fP, \fC [private]\fP"

.PP
Definition at line \fB36\fP of file \fBW65C51\&.cs\fP\&.
.PP
.nf
36 { get; set; }
.fi


.SH "Author"
.PP 
Generated automatically by Doxygen for WolfNet 6502 WorkBench Computer Emulator from the source code\&.
