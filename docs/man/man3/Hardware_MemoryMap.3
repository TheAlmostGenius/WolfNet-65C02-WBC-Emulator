.TH "Hardware.MemoryMap" 3 "Wed Sep 28 2022" "Version beta" "WolfNet 6502 WorkBench Computer Emulator" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Hardware.MemoryMap
.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBBankedRam\fP"
.br
.ti -1c
.RI "class \fBBankedRom\fP"
.br
.ti -1c
.RI "class \fBDeviceArea\fP"
.br
.ti -1c
.RI "class \fBDevices\fP"
.br
.ti -1c
.RI "class \fBSharedRom\fP"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static void \fBInit\fP (\fBW65C02\fP processor, \fBW65C22\fP gpio, \fBW65C22\fP mm65sib, \fBW65C51\fP acia, \fBHM62256\fP bankedRam, \fBAT28CXX\fP bankedRom, \fBAT28CXX\fP sharedRom)"
.br
.ti -1c
.RI "static byte \fBRead\fP (int address)"
.br
.RI "Returns the byte at the given address\&.  "
.ti -1c
.RI "static byte \fBReadWithoutCycle\fP (int address)"
.br
.RI "Returns the byte at the given address without incrementing the cycle count\&.  "
.ti -1c
.RI "static void \fBWrite\fP (int address, byte data)"
.br
.RI "Writes data to the given address\&.  "
.ti -1c
.RI "static void \fBWriteWithoutCycle\fP (int address, byte data)"
.br
.RI "Writes data to the given address without incrementing the cycle count\&.  "
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static readonly int \fBLength\fP = 0xFFFF"
.br
.in -1c
.SS "Properties"

.in +1c
.ti -1c
.RI "static \fBW65C02\fP \fBProcessor\fP\fC [get, set]\fP"
.br
.ti -1c
.RI "static \fBW65C22\fP \fBGPIO\fP\fC [get, set]\fP"
.br
.ti -1c
.RI "static \fBW65C22\fP \fBMM65SIB\fP\fC [get, set]\fP"
.br
.ti -1c
.RI "static \fBW65C51\fP \fBACIA\fP\fC [get, set]\fP"
.br
.ti -1c
.RI "static \fBAT28CXX\fP \fBSharedROM\fP\fC [get, set]\fP"
.br
.ti -1c
.RI "static \fBAT28CXX\fP \fBBankedROM\fP\fC [get, set]\fP"
.br
.ti -1c
.RI "static \fBHM62256\fP \fBBankedRAM\fP\fC [get, set]\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Definition at line \fB5\fP of file \fBMemoryMap\&.cs\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "static void Hardware\&.MemoryMap\&.Init (\fBW65C02\fP processor, \fBW65C22\fP gpio, \fBW65C22\fP mm65sib, \fBW65C51\fP acia, \fBHM62256\fP bankedRam, \fBAT28CXX\fP bankedRom, \fBAT28CXX\fP sharedRom)\fC [inline]\fP, \fC [static]\fP"

.PP
Definition at line \fB86\fP of file \fBMemoryMap\&.cs\fP\&.
.PP
.nf
87         {
88             Processor = processor;
89             GPIO = gpio;
90             MM65SIB = mm65sib;
91             ACIA = acia;
92             SharedROM = sharedRom;
93             BankedROM = bankedRom;
94             BankedRAM = bankedRam;
95         }
.fi
.SS "static byte Hardware\&.MemoryMap\&.Read (int address)\fC [inline]\fP, \fC [static]\fP"

.PP
Returns the byte at the given address\&.  
.PP
\fBParameters\fP
.RS 4
\fIaddress\fP The address to return
.RE
.PP
\fBReturns\fP
.RS 4
the byte being returned
.RE
.PP

.PP
Definition at line \fB102\fP of file \fBMemoryMap\&.cs\fP\&.
.PP
.nf
103         {
104             var value = ReadWithoutCycle(address);
105             Processor\&.IncrementCycleCount();
106             return value;
107         }
.fi
.SS "static byte Hardware\&.MemoryMap\&.ReadWithoutCycle (int address)\fC [inline]\fP, \fC [static]\fP"

.PP
Returns the byte at the given address without incrementing the cycle count\&.  
.PP
\fBParameters\fP
.RS 4
\fIaddress\fP The address to return
.RE
.PP
\fBReturns\fP
.RS 4
the byte being returned
.RE
.PP

.PP
Definition at line \fB114\fP of file \fBMemoryMap\&.cs\fP\&.
.PP
.nf
115         {
116             if ((ACIA\&.Offset <= address) && (address <= (ACIA\&.Offset + ACIA\&.Length)))
117             {
118                 return ACIA\&.Read(address);
119             }
120             else if ((GPIO\&.Offset <= address) && (address <= (GPIO\&.Offset + GPIO\&.Length)))
121             {
122                 return GPIO\&.Read(address);
123             }
124             else if ((MM65SIB\&.Offset <= address) && (address <= (MM65SIB\&.Offset + MM65SIB\&.Length)))
125             {
126                 return MM65SIB\&.Read(address);
127             }
128             else if ((DeviceArea\&.Offset <= address) && (address <= DeviceArea\&.End))
129             {
130                 return 0x00;
131             }
132             else if ((SharedROM\&.Offset <= address) && (address <= SharedROM\&.End))
133             {
134                 return SharedROM\&.Read(address);
135             }
136             else if ((BankedROM\&.Offset <= address) && (address <= BankedROM\&.End))
137             {
138                 return BankedROM\&.Read(address);
139             }
140             else if ((BankedRAM\&.Offset <= address) && (address <= BankedRAM\&.End))
141             {
142                 return BankedRAM\&.Read(address);
143             }
144             else
145             {
146                 return 0x00;
147             }
148         }
.fi
.SS "static void Hardware\&.MemoryMap\&.Write (int address, byte data)\fC [inline]\fP, \fC [static]\fP"

.PP
Writes data to the given address\&.  
.PP
\fBParameters\fP
.RS 4
\fIaddress\fP The address to write data to\&.
.br
\fIdata\fP The data to write\&.
.RE
.PP

.PP
Definition at line \fB155\fP of file \fBMemoryMap\&.cs\fP\&.
.PP
.nf
156         {
157             Processor\&.IncrementCycleCount();
158             WriteWithoutCycle(address, data);
159         }
.fi
.SS "static void Hardware\&.MemoryMap\&.WriteWithoutCycle (int address, byte data)\fC [inline]\fP, \fC [static]\fP"

.PP
Writes data to the given address without incrementing the cycle count\&.  
.PP
\fBParameters\fP
.RS 4
\fIaddress\fP The address to write data to\&.
.br
\fIdata\fP The data to write\&.
.RE
.PP

.PP
Definition at line \fB166\fP of file \fBMemoryMap\&.cs\fP\&.
.PP
.nf
167         {
168             if ((ACIA\&.Offset <= address) && (address <= (ACIA\&.Offset + ACIA\&.Length)))
169             {
170                 ACIA\&.Write(address, data);
171             }
172             else if ((GPIO\&.Offset <= address) && (address <= (GPIO\&.Offset + GPIO\&.Length)))
173             {
174                 GPIO\&.Write(address, data);
175             }
176             else if ((MM65SIB\&.Offset <= address) && (address <= (MM65SIB\&.Offset + MM65SIB\&.Length)))
177             {
178                 MM65SIB\&.Write(address, data);
179             }
180             else if ((SharedROM\&.Offset <= address) && (address <= (SharedROM\&.Offset + SharedROM\&.Length)))
181             {
182                 SharedROM\&.Write(address, data);
183             }
184             else if ((BankedROM\&.Offset <= address) && (address <= (BankedROM\&.Offset + BankedROM\&.Length)))
185             {
186                 BankedROM\&.Write(address, data);
187             }
188             else if ((BankedRAM\&.Offset <= address) && (address <= (BankedRAM\&.Offset + BankedRAM\&.Length)))
189             {
190                 BankedRAM\&.Write(address, data);
191             }
192             else
193             {
194                 throw new ApplicationException(String\&.Format("Cannot write to address: {0}", address));
195             }
196         }
.fi
.SH "Member Data Documentation"
.PP 
.SS "readonly int Hardware\&.MemoryMap\&.Length = 0xFFFF\fC [static]\fP"

.PP
Definition at line \fB76\fP of file \fBMemoryMap\&.cs\fP\&.
.SH "Property Documentation"
.PP 
.SS "\fBW65C51\fP Hardware\&.MemoryMap\&.ACIA\fC [static]\fP, \fC [get]\fP, \fC [set]\fP, \fC [private]\fP"

.PP
Definition at line \fB81\fP of file \fBMemoryMap\&.cs\fP\&.
.PP
.nf
81 { get; set; }
.fi
.SS "\fBHM62256\fP Hardware\&.MemoryMap\&.BankedRAM\fC [static]\fP, \fC [get]\fP, \fC [set]\fP, \fC [private]\fP"

.PP
Definition at line \fB84\fP of file \fBMemoryMap\&.cs\fP\&.
.PP
.nf
84 { get; set; }
.fi
.SS "\fBAT28CXX\fP Hardware\&.MemoryMap\&.BankedROM\fC [static]\fP, \fC [get]\fP, \fC [set]\fP, \fC [private]\fP"

.PP
Definition at line \fB83\fP of file \fBMemoryMap\&.cs\fP\&.
.PP
.nf
83 { get; set; }
.fi
.SS "\fBW65C22\fP Hardware\&.MemoryMap\&.GPIO\fC [static]\fP, \fC [get]\fP, \fC [set]\fP, \fC [private]\fP"

.PP
Definition at line \fB79\fP of file \fBMemoryMap\&.cs\fP\&.
.PP
.nf
79 { get; set; }
.fi
.SS "\fBW65C22\fP Hardware\&.MemoryMap\&.MM65SIB\fC [static]\fP, \fC [get]\fP, \fC [set]\fP, \fC [private]\fP"

.PP
Definition at line \fB80\fP of file \fBMemoryMap\&.cs\fP\&.
.PP
.nf
80 { get; set; }
.fi
.SS "\fBW65C02\fP Hardware\&.MemoryMap\&.Processor\fC [static]\fP, \fC [get]\fP, \fC [set]\fP, \fC [private]\fP"

.PP
Definition at line \fB78\fP of file \fBMemoryMap\&.cs\fP\&.
.PP
.nf
78 { get; set; }
.fi
.SS "\fBAT28CXX\fP Hardware\&.MemoryMap\&.SharedROM\fC [static]\fP, \fC [get]\fP, \fC [set]\fP, \fC [private]\fP"

.PP
Definition at line \fB82\fP of file \fBMemoryMap\&.cs\fP\&.
.PP
.nf
82 { get; set; }
.fi


.SH "Author"
.PP 
Generated automatically by Doxygen for WolfNet 6502 WorkBench Computer Emulator from the source code\&.
