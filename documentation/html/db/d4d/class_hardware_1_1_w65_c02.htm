<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.3"/>
<title>WolfNet 6502 WorkBench Computer Emulator: Hardware.W65C02 Class Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">WolfNet 6502 WorkBench Computer Emulator
   &#160;<span id="projectnumber">alpha</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.3 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="../../index.htm"><span>Main&#160;Page</span></a></li>
      <li class="current"><a href="../../annotated.htm"><span>Classes</span></a></li>
      <li><a href="../../files.htm"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="../../search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="../../search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="../../annotated.htm"><span>Class&#160;List</span></a></li>
      <li><a href="../../classes.htm"><span>Class&#160;Index</span></a></li>
      <li><a href="../../hierarchy.htm"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="../../functions.htm"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('db/d4d/class_hardware_1_1_w65_c02.htm','../../');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Properties</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Events</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="#pub-static-attribs">Static Public Attributes</a> &#124;
<a href="#pro-static-methods">Static Protected Member Functions</a> &#124;
<a href="#properties">Properties</a> &#124;
<a href="#pri-static-methods">Static Private Member Functions</a> &#124;
<a href="#pri-static-attribs">Static Private Attributes</a> &#124;
<a href="../../d0/d60/class_hardware_1_1_w65_c02-members.htm">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">Hardware.W65C02 Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>An implementation of a <a class="el" href="../../db/d4d/class_hardware_1_1_w65_c02.htm" title="An implementation of a W65C02 Processor. ">W65C02</a> Processor.  
 <a href="../../db/d4d/class_hardware_1_1_w65_c02.htm#details">More...</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a86db392ae9eb672281ca9cdaff7eb369"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d4d/class_hardware_1_1_w65_c02_a86db392ae9eb672281ca9cdaff7eb369.htm#a86db392ae9eb672281ca9cdaff7eb369">W65C02</a> ()</td></tr>
<tr class="memdesc:a86db392ae9eb672281ca9cdaff7eb369"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default Constructor, Instantiates a new instance of the processor.  <a href="#a86db392ae9eb672281ca9cdaff7eb369"></a><br/></td></tr>
<tr class="separator:a86db392ae9eb672281ca9cdaff7eb369"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a4c296a33414aaea18eca9b60dd5abab4"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d4d/class_hardware_1_1_w65_c02_a4c296a33414aaea18eca9b60dd5abab4.htm#a4c296a33414aaea18eca9b60dd5abab4">Reset</a> ()</td></tr>
<tr class="memdesc:a4c296a33414aaea18eca9b60dd5abab4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes the processor to its default state.  <a href="#a4c296a33414aaea18eca9b60dd5abab4"></a><br/></td></tr>
<tr class="separator:a4c296a33414aaea18eca9b60dd5abab4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a114962ad3e122fe5e77abccb2ac37aa1"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d4d/class_hardware_1_1_w65_c02_a114962ad3e122fe5e77abccb2ac37aa1.htm#a114962ad3e122fe5e77abccb2ac37aa1">NextStep</a> ()</td></tr>
<tr class="memdesc:a114962ad3e122fe5e77abccb2ac37aa1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs the next step on the processor  <a href="#a114962ad3e122fe5e77abccb2ac37aa1"></a><br/></td></tr>
<tr class="separator:a114962ad3e122fe5e77abccb2ac37aa1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a81a8eb880fcdac32f4d5a92790e90735"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d4d/class_hardware_1_1_w65_c02_a81a8eb880fcdac32f4d5a92790e90735.htm#a81a8eb880fcdac32f4d5a92790e90735">LoadProgram</a> (int offset, byte[] program)</td></tr>
<tr class="memdesc:a81a8eb880fcdac32f4d5a92790e90735"><td class="mdescLeft">&#160;</td><td class="mdescRight">Loads a program into the processors memory  <a href="#a81a8eb880fcdac32f4d5a92790e90735"></a><br/></td></tr>
<tr class="separator:a81a8eb880fcdac32f4d5a92790e90735"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4d6c818042bd5c1c5c99fb1fa28d71c7"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d4d/class_hardware_1_1_w65_c02_a4d6c818042bd5c1c5c99fb1fa28d71c7.htm#a4d6c818042bd5c1c5c99fb1fa28d71c7">LoadProgram</a> (int offset, byte[] program, int initialProgramCounter)</td></tr>
<tr class="memdesc:a4d6c818042bd5c1c5c99fb1fa28d71c7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Loads a program into the processors memory  <a href="#a4d6c818042bd5c1c5c99fb1fa28d71c7"></a><br/></td></tr>
<tr class="separator:a4d6c818042bd5c1c5c99fb1fa28d71c7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3490fdec51894da2f611871396122b43"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d4d/class_hardware_1_1_w65_c02_a3490fdec51894da2f611871396122b43.htm#a3490fdec51894da2f611871396122b43">InterruptRequest</a> ()</td></tr>
<tr class="memdesc:a3490fdec51894da2f611871396122b43"><td class="mdescLeft">&#160;</td><td class="mdescRight">The InterruptRequest or IRQ  <a href="#a3490fdec51894da2f611871396122b43"></a><br/></td></tr>
<tr class="separator:a3490fdec51894da2f611871396122b43"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2f18b657f928c59d14d91ea3e68d0312"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d4d/class_hardware_1_1_w65_c02_a2f18b657f928c59d14d91ea3e68d0312.htm#a2f18b657f928c59d14d91ea3e68d0312">ClearMemory</a> ()</td></tr>
<tr class="memdesc:a2f18b657f928c59d14d91ea3e68d0312"><td class="mdescLeft">&#160;</td><td class="mdescRight">Clears the memory  <a href="#a2f18b657f928c59d14d91ea3e68d0312"></a><br/></td></tr>
<tr class="separator:a2f18b657f928c59d14d91ea3e68d0312"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9ed4e776a88e30933642a3f15f665f0c"><td class="memItemLeft" align="right" valign="top">static byte&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d4d/class_hardware_1_1_w65_c02_a9ed4e776a88e30933642a3f15f665f0c.htm#a9ed4e776a88e30933642a3f15f665f0c">ReadMemoryValue</a> (int address)</td></tr>
<tr class="memdesc:a9ed4e776a88e30933642a3f15f665f0c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the byte at the given address.  <a href="#a9ed4e776a88e30933642a3f15f665f0c"></a><br/></td></tr>
<tr class="separator:a9ed4e776a88e30933642a3f15f665f0c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa87324e6a5b7787fa2985d1c0af12960"><td class="memItemLeft" align="right" valign="top">static byte&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d4d/class_hardware_1_1_w65_c02_aa87324e6a5b7787fa2985d1c0af12960.htm#aa87324e6a5b7787fa2985d1c0af12960">ReadMemoryValueWithoutCycle</a> (int address)</td></tr>
<tr class="memdesc:aa87324e6a5b7787fa2985d1c0af12960"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the byte at a given address without incrementing the cycle. Useful for test harness.  <a href="#aa87324e6a5b7787fa2985d1c0af12960"></a><br/></td></tr>
<tr class="separator:aa87324e6a5b7787fa2985d1c0af12960"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abc0b023987e2a8b70ce66e05072832e8"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d4d/class_hardware_1_1_w65_c02_abc0b023987e2a8b70ce66e05072832e8.htm#abc0b023987e2a8b70ce66e05072832e8">WriteMemoryValue</a> (int address, byte data)</td></tr>
<tr class="memdesc:abc0b023987e2a8b70ce66e05072832e8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Writes data to the given address.  <a href="#abc0b023987e2a8b70ce66e05072832e8"></a><br/></td></tr>
<tr class="separator:abc0b023987e2a8b70ce66e05072832e8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5b37fff1d0eddf695ff9973dc5a3d9b1"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d4d/class_hardware_1_1_w65_c02_a5b37fff1d0eddf695ff9973dc5a3d9b1.htm#a5b37fff1d0eddf695ff9973dc5a3d9b1">WriteMemoryValueWithoutCycle</a> (int address, byte data)</td></tr>
<tr class="memdesc:a5b37fff1d0eddf695ff9973dc5a3d9b1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Writes data to the given address without incrementing the cycle.  <a href="#a5b37fff1d0eddf695ff9973dc5a3d9b1"></a><br/></td></tr>
<tr class="separator:a5b37fff1d0eddf695ff9973dc5a3d9b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a65600d6823e93ed2fb9dc799f06acd93"><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d4d/class_hardware_1_1_w65_c02_a65600d6823e93ed2fb9dc799f06acd93.htm#a65600d6823e93ed2fb9dc799f06acd93">GetCycleCount</a> ()</td></tr>
<tr class="memdesc:a65600d6823e93ed2fb9dc799f06acd93"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the Number of Cycles that have elapsed  <a href="#a65600d6823e93ed2fb9dc799f06acd93"></a><br/></td></tr>
<tr class="separator:a65600d6823e93ed2fb9dc799f06acd93"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3bf948dd23ce88ed961617961625b286"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d4d/class_hardware_1_1_w65_c02_a3bf948dd23ce88ed961617961625b286.htm#a3bf948dd23ce88ed961617961625b286">ResetCycleCount</a> ()</td></tr>
<tr class="memdesc:a3bf948dd23ce88ed961617961625b286"><td class="mdescLeft">&#160;</td><td class="mdescRight">Resets the Cycle Count back to 0  <a href="#a3bf948dd23ce88ed961617961625b286"></a><br/></td></tr>
<tr class="separator:a3bf948dd23ce88ed961617961625b286"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a17ba698a6817caf2c5e1a0de63234b91"><td class="memItemLeft" align="right" valign="top">static byte[]&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d4d/class_hardware_1_1_w65_c02_a17ba698a6817caf2c5e1a0de63234b91.htm#a17ba698a6817caf2c5e1a0de63234b91">DumpMemory</a> ()</td></tr>
<tr class="memdesc:a17ba698a6817caf2c5e1a0de63234b91"><td class="mdescLeft">&#160;</td><td class="mdescRight">Dumps the entire memory object. Used when saving the memory state  <a href="#a17ba698a6817caf2c5e1a0de63234b91"></a><br/></td></tr>
<tr class="separator:a17ba698a6817caf2c5e1a0de63234b91"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7b3dc1ab58d06adf36bf1e6d4535b225"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d4d/class_hardware_1_1_w65_c02_a7b3dc1ab58d06adf36bf1e6d4535b225.htm#a7b3dc1ab58d06adf36bf1e6d4535b225">AslOperation</a> (<a class="el" href="../../d6/d5f/namespace_hardware_a20ed8885928dd1f3f9eac50507a162fc.htm#a20ed8885928dd1f3f9eac50507a162fc">AddressingMode</a> addressingMode)</td></tr>
<tr class="memdesc:a7b3dc1ab58d06adf36bf1e6d4535b225"><td class="mdescLeft">&#160;</td><td class="mdescRight">The ASL - Shift Left One Bit (Memory or Accumulator)  <a href="#a7b3dc1ab58d06adf36bf1e6d4535b225"></a><br/></td></tr>
<tr class="separator:a7b3dc1ab58d06adf36bf1e6d4535b225"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-attribs"></a>
Static Public Attributes</h2></td></tr>
<tr class="memitem:aea5bad1eb73459933b9baf077b80a69d"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d4d/class_hardware_1_1_w65_c02_aea5bad1eb73459933b9baf077b80a69d.htm#aea5bad1eb73459933b9baf077b80a69d">isRunning</a></td></tr>
<tr class="separator:aea5bad1eb73459933b9baf077b80a69d"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-static-methods"></a>
Static Protected Member Functions</h2></td></tr>
<tr class="memitem:a774162c784b49d9fa72c16e1ff2eb8f1"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d4d/class_hardware_1_1_w65_c02_a774162c784b49d9fa72c16e1ff2eb8f1.htm#a774162c784b49d9fa72c16e1ff2eb8f1">IncrementCycleCount</a> ()</td></tr>
<tr class="memdesc:a774162c784b49d9fa72c16e1ff2eb8f1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Increments the Cycle Count, causes a CycleCountIncrementedAction to fire.  <a href="#a774162c784b49d9fa72c16e1ff2eb8f1"></a><br/></td></tr>
<tr class="separator:a774162c784b49d9fa72c16e1ff2eb8f1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a637c61e1b6fdb1635b8989a30d66933d"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d4d/class_hardware_1_1_w65_c02_a637c61e1b6fdb1635b8989a30d66933d.htm#a637c61e1b6fdb1635b8989a30d66933d">SetNegativeFlag</a> (int value)</td></tr>
<tr class="memdesc:a637c61e1b6fdb1635b8989a30d66933d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the IsSignNegative register  <a href="#a637c61e1b6fdb1635b8989a30d66933d"></a><br/></td></tr>
<tr class="separator:a637c61e1b6fdb1635b8989a30d66933d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acdea56a18e3d26e5b8eebf794a0bf44c"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d4d/class_hardware_1_1_w65_c02_acdea56a18e3d26e5b8eebf794a0bf44c.htm#acdea56a18e3d26e5b8eebf794a0bf44c">SetZeroFlag</a> (int value)</td></tr>
<tr class="memdesc:acdea56a18e3d26e5b8eebf794a0bf44c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the IsResultZero register  <a href="#acdea56a18e3d26e5b8eebf794a0bf44c"></a><br/></td></tr>
<tr class="separator:acdea56a18e3d26e5b8eebf794a0bf44c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a34fa474bd1ec3a4b12987287573a1503"><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d4d/class_hardware_1_1_w65_c02_a34fa474bd1ec3a4b12987287573a1503.htm#a34fa474bd1ec3a4b12987287573a1503">GetAddressByAddressingMode</a> (<a class="el" href="../../d6/d5f/namespace_hardware_a20ed8885928dd1f3f9eac50507a162fc.htm#a20ed8885928dd1f3f9eac50507a162fc">AddressingMode</a> addressingMode)</td></tr>
<tr class="memdesc:a34fa474bd1ec3a4b12987287573a1503"><td class="mdescLeft">&#160;</td><td class="mdescRight">Uses the AddressingMode to return the correct address based on the mode. Note: This method will not increment the program counter for any mode. Note: This method will return an error if called for either the immediate or accumulator modes.  <a href="#a34fa474bd1ec3a4b12987287573a1503"></a><br/></td></tr>
<tr class="separator:a34fa474bd1ec3a4b12987287573a1503"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a978094946dc03c4c90940f2ce8c6495d"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d4d/class_hardware_1_1_w65_c02_a978094946dc03c4c90940f2ce8c6495d.htm#a978094946dc03c4c90940f2ce8c6495d">AddWithCarryOperation</a> (<a class="el" href="../../d6/d5f/namespace_hardware_a20ed8885928dd1f3f9eac50507a162fc.htm#a20ed8885928dd1f3f9eac50507a162fc">AddressingMode</a> addressingMode)</td></tr>
<tr class="memdesc:a978094946dc03c4c90940f2ce8c6495d"><td class="mdescLeft">&#160;</td><td class="mdescRight">The ADC - Add Memory to Accumulator with Carry Operation  <a href="#a978094946dc03c4c90940f2ce8c6495d"></a><br/></td></tr>
<tr class="separator:a978094946dc03c4c90940f2ce8c6495d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abf9348a4465866fa170e468d29ca86c8"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d4d/class_hardware_1_1_w65_c02_abf9348a4465866fa170e468d29ca86c8.htm#abf9348a4465866fa170e468d29ca86c8">SubtractWithBorrowOperation</a> (<a class="el" href="../../d6/d5f/namespace_hardware_a20ed8885928dd1f3f9eac50507a162fc.htm#a20ed8885928dd1f3f9eac50507a162fc">AddressingMode</a> addressingMode)</td></tr>
<tr class="memdesc:abf9348a4465866fa170e468d29ca86c8"><td class="mdescLeft">&#160;</td><td class="mdescRight">The SBC operation. Performs a subtract with carry operation on the accumulator and a value in memory.  <a href="#abf9348a4465866fa170e468d29ca86c8"></a><br/></td></tr>
<tr class="separator:abf9348a4465866fa170e468d29ca86c8"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="properties"></a>
Properties</h2></td></tr>
<tr class="memitem:a1dc4da39992dfaef7d4042c4b4656b9d"><td class="memItemLeft" align="right" valign="top">static byte[]&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d4d/class_hardware_1_1_w65_c02_a1dc4da39992dfaef7d4042c4b4656b9d.htm#a1dc4da39992dfaef7d4042c4b4656b9d">Memory</a><code> [get, set]</code></td></tr>
<tr class="memdesc:a1dc4da39992dfaef7d4042c4b4656b9d"><td class="mdescLeft">&#160;</td><td class="mdescRight">The memory  <a href="#a1dc4da39992dfaef7d4042c4b4656b9d"></a><br/></td></tr>
<tr class="separator:a1dc4da39992dfaef7d4042c4b4656b9d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4eec5b3efabf5175eaef145c3a886054"><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d4d/class_hardware_1_1_w65_c02_a4eec5b3efabf5175eaef145c3a886054.htm#a4eec5b3efabf5175eaef145c3a886054">Accumulator</a><code> [get, set]</code></td></tr>
<tr class="memdesc:a4eec5b3efabf5175eaef145c3a886054"><td class="mdescLeft">&#160;</td><td class="mdescRight">The Accumulator. This value is implemented as an integer intead of a byte. This is done so we can detect wrapping of the value and set the correct number of cycles.  <a href="#a4eec5b3efabf5175eaef145c3a886054"></a><br/></td></tr>
<tr class="separator:a4eec5b3efabf5175eaef145c3a886054"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa30549de0474b350b3fa8ca30714a652"><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d4d/class_hardware_1_1_w65_c02_aa30549de0474b350b3fa8ca30714a652.htm#aa30549de0474b350b3fa8ca30714a652">XRegister</a><code> [get, set]</code></td></tr>
<tr class="memdesc:aa30549de0474b350b3fa8ca30714a652"><td class="mdescLeft">&#160;</td><td class="mdescRight">The X Index Register  <a href="#aa30549de0474b350b3fa8ca30714a652"></a><br/></td></tr>
<tr class="separator:aa30549de0474b350b3fa8ca30714a652"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a23427a87d4c5710bf18e0bc338badc50"><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d4d/class_hardware_1_1_w65_c02_a23427a87d4c5710bf18e0bc338badc50.htm#a23427a87d4c5710bf18e0bc338badc50">YRegister</a><code> [get, set]</code></td></tr>
<tr class="memdesc:a23427a87d4c5710bf18e0bc338badc50"><td class="mdescLeft">&#160;</td><td class="mdescRight">The Y Index Register  <a href="#a23427a87d4c5710bf18e0bc338badc50"></a><br/></td></tr>
<tr class="separator:a23427a87d4c5710bf18e0bc338badc50"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4f2280e861529c00e5adca272a18a8df"><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d4d/class_hardware_1_1_w65_c02_a4f2280e861529c00e5adca272a18a8df.htm#a4f2280e861529c00e5adca272a18a8df">CurrentOpCode</a><code> [get, set]</code></td></tr>
<tr class="memdesc:a4f2280e861529c00e5adca272a18a8df"><td class="mdescLeft">&#160;</td><td class="mdescRight">The Current Op Code being executed by the system  <a href="#a4f2280e861529c00e5adca272a18a8df"></a><br/></td></tr>
<tr class="separator:a4f2280e861529c00e5adca272a18a8df"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaa88743b54b6e1a121c750786b314d93"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="../../d4/d41/class_hardware_1_1_disassembly.htm">Disassembly</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d4d/class_hardware_1_1_w65_c02_aaa88743b54b6e1a121c750786b314d93.htm#aaa88743b54b6e1a121c750786b314d93">CurrentDisassembly</a><code> [get, set]</code></td></tr>
<tr class="memdesc:aaa88743b54b6e1a121c750786b314d93"><td class="mdescLeft">&#160;</td><td class="mdescRight">The disassembly of the current operation. This value is only set when the CPU is built in debug mode.  <a href="#aaa88743b54b6e1a121c750786b314d93"></a><br/></td></tr>
<tr class="separator:aaa88743b54b6e1a121c750786b314d93"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad953847ee02d563ea055be5f70976247"><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d4d/class_hardware_1_1_w65_c02_ad953847ee02d563ea055be5f70976247.htm#ad953847ee02d563ea055be5f70976247">ProgramCounter</a><code> [get, set]</code></td></tr>
<tr class="memdesc:ad953847ee02d563ea055be5f70976247"><td class="mdescLeft">&#160;</td><td class="mdescRight">Points to the Current Address of the instruction being executed by the system. The PC wraps when the value is greater than 65535, or less than 0.  <a href="#ad953847ee02d563ea055be5f70976247"></a><br/></td></tr>
<tr class="separator:ad953847ee02d563ea055be5f70976247"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac83aed13efee53d08984eeb08543f72b"><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d4d/class_hardware_1_1_w65_c02_ac83aed13efee53d08984eeb08543f72b.htm#ac83aed13efee53d08984eeb08543f72b">StackPointer</a><code> [get, set]</code></td></tr>
<tr class="memdesc:ac83aed13efee53d08984eeb08543f72b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Points to the Current Position of the Stack. This value is a 00-FF value but is offset to point to the location in memory where the stack resides.  <a href="#ac83aed13efee53d08984eeb08543f72b"></a><br/></td></tr>
<tr class="separator:ac83aed13efee53d08984eeb08543f72b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad9f347c2b1cbce3021eec9b560bf0d48"><td class="memItemLeft" align="right" valign="top">static Action&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d4d/class_hardware_1_1_w65_c02_ad9f347c2b1cbce3021eec9b560bf0d48.htm#ad9f347c2b1cbce3021eec9b560bf0d48">CycleCountIncrementedAction</a><code> [get, set]</code></td></tr>
<tr class="memdesc:ad9f347c2b1cbce3021eec9b560bf0d48"><td class="mdescLeft">&#160;</td><td class="mdescRight">An external action that occurs when the cycle count is incremented  <a href="#ad9f347c2b1cbce3021eec9b560bf0d48"></a><br/></td></tr>
<tr class="separator:ad9f347c2b1cbce3021eec9b560bf0d48"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a01a336b0ce4f4f4675a3cb673f776a08"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d4d/class_hardware_1_1_w65_c02_a01a336b0ce4f4f4675a3cb673f776a08.htm#a01a336b0ce4f4f4675a3cb673f776a08">CarryFlag</a><code> [get, set]</code></td></tr>
<tr class="memdesc:a01a336b0ce4f4f4675a3cb673f776a08"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is the carry flag. when adding, if the result is greater than 255 or 99 in BCD Mode, then this bit is enabled. In subtraction this is reversed and set to false if a borrow is required IE the result is less than 0  <a href="#a01a336b0ce4f4f4675a3cb673f776a08"></a><br/></td></tr>
<tr class="separator:a01a336b0ce4f4f4675a3cb673f776a08"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a62f3a6f47dd43adc8579121085ef96ce"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d4d/class_hardware_1_1_w65_c02_a62f3a6f47dd43adc8579121085ef96ce.htm#a62f3a6f47dd43adc8579121085ef96ce">ZeroFlag</a><code> [get, set]</code></td></tr>
<tr class="memdesc:a62f3a6f47dd43adc8579121085ef96ce"><td class="mdescLeft">&#160;</td><td class="mdescRight">Is true if one of the registers is set to zero.  <a href="#a62f3a6f47dd43adc8579121085ef96ce"></a><br/></td></tr>
<tr class="separator:a62f3a6f47dd43adc8579121085ef96ce"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae65b4975a58f0332067377ab71455668"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d4d/class_hardware_1_1_w65_c02_ae65b4975a58f0332067377ab71455668.htm#ae65b4975a58f0332067377ab71455668">DisableInterruptFlag</a><code> [get, set]</code></td></tr>
<tr class="memdesc:ae65b4975a58f0332067377ab71455668"><td class="mdescLeft">&#160;</td><td class="mdescRight">This determines if Interrupts are currently disabled. This flag is turned on during a reset to prevent an interrupt from occuring during startup/Initialization. If this flag is true, then the IRQ pin is ignored.  <a href="#ae65b4975a58f0332067377ab71455668"></a><br/></td></tr>
<tr class="separator:ae65b4975a58f0332067377ab71455668"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad42e58d4067c1f778bfdf87af8f0a87e"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d4d/class_hardware_1_1_w65_c02_ad42e58d4067c1f778bfdf87af8f0a87e.htm#ad42e58d4067c1f778bfdf87af8f0a87e">DecimalFlag</a><code> [get, set]</code></td></tr>
<tr class="memdesc:ad42e58d4067c1f778bfdf87af8f0a87e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Binary Coded Decimal Mode is set/cleared via this flag. when this mode is in effect, a byte represents a number from 0-99.  <a href="#ad42e58d4067c1f778bfdf87af8f0a87e"></a><br/></td></tr>
<tr class="separator:ad42e58d4067c1f778bfdf87af8f0a87e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae8a99644c32735c4c267ec3205cc2143"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d4d/class_hardware_1_1_w65_c02_ae8a99644c32735c4c267ec3205cc2143.htm#ae8a99644c32735c4c267ec3205cc2143">OverflowFlag</a><code> [get, set]</code></td></tr>
<tr class="memdesc:ae8a99644c32735c4c267ec3205cc2143"><td class="mdescLeft">&#160;</td><td class="mdescRight">This property is set when an overflow occurs. An overflow happens if the high bit(7) changes during the operation. Remember that values from 128-256 are negative values as the high bit is set to 1. Examples: 64 + 64 = -128 -128 + -128 = 0  <a href="#ae8a99644c32735c4c267ec3205cc2143"></a><br/></td></tr>
<tr class="separator:ae8a99644c32735c4c267ec3205cc2143"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af066a29f612f045f2d6a7f8e74bfc0c0"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d4d/class_hardware_1_1_w65_c02_af066a29f612f045f2d6a7f8e74bfc0c0.htm#af066a29f612f045f2d6a7f8e74bfc0c0">NegativeFlag</a><code> [get, set]</code></td></tr>
<tr class="memdesc:af066a29f612f045f2d6a7f8e74bfc0c0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set to true if the result of an operation is negative in ADC and SBC operations. Remember that 128-256 represent negative numbers when doing signed math. In shift operations the sign holds the carry.  <a href="#af066a29f612f045f2d6a7f8e74bfc0c0"></a><br/></td></tr>
<tr class="separator:af066a29f612f045f2d6a7f8e74bfc0c0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a14dc12ac8300a711a59c8b3a39a50610"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d4d/class_hardware_1_1_w65_c02_a14dc12ac8300a711a59c8b3a39a50610.htm#a14dc12ac8300a711a59c8b3a39a50610">TriggerNmi</a><code> [get, set]</code></td></tr>
<tr class="memdesc:a14dc12ac8300a711a59c8b3a39a50610"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set to true when an NMI should occur  <a href="#a14dc12ac8300a711a59c8b3a39a50610"></a><br/></td></tr>
<tr class="separator:a14dc12ac8300a711a59c8b3a39a50610"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0af854675b2c983094976662f7351eb1"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d4d/class_hardware_1_1_w65_c02_a0af854675b2c983094976662f7351eb1.htm#a0af854675b2c983094976662f7351eb1">TriggerIRQ</a><code> [get, set]</code></td></tr>
<tr class="memdesc:a0af854675b2c983094976662f7351eb1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set to true when an IRQ has occurred and is being processed by the CPU.  <a href="#a0af854675b2c983094976662f7351eb1"></a><br/></td></tr>
<tr class="separator:a0af854675b2c983094976662f7351eb1"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-static-methods"></a>
Static Private Member Functions</h2></td></tr>
<tr class="memitem:a2414ad99702a0b94da8f519b093edabb"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d4d/class_hardware_1_1_w65_c02_a2414ad99702a0b94da8f519b093edabb.htm#a2414ad99702a0b94da8f519b093edabb">ExecuteOpCode</a> ()</td></tr>
<tr class="memdesc:a2414ad99702a0b94da8f519b093edabb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Executes an Opcode  <a href="#a2414ad99702a0b94da8f519b093edabb"></a><br/></td></tr>
<tr class="separator:a2414ad99702a0b94da8f519b093edabb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5102951f25f97a9ff131907d820c25fa"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d4d/class_hardware_1_1_w65_c02_a5102951f25f97a9ff131907d820c25fa.htm#a5102951f25f97a9ff131907d820c25fa">MoveProgramCounterByRelativeValue</a> (byte valueToMove)</td></tr>
<tr class="memdesc:a5102951f25f97a9ff131907d820c25fa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Moves the ProgramCounter in a given direction based on the value inputted  <a href="#a5102951f25f97a9ff131907d820c25fa"></a><br/></td></tr>
<tr class="separator:a5102951f25f97a9ff131907d820c25fa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5dc0bb461102577a7f9e4384dc77e219"><td class="memItemLeft" align="right" valign="top">static byte&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d4d/class_hardware_1_1_w65_c02_a5dc0bb461102577a7f9e4384dc77e219.htm#a5dc0bb461102577a7f9e4384dc77e219">PeekStack</a> ()</td></tr>
<tr class="memdesc:a5dc0bb461102577a7f9e4384dc77e219"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a the value from the stack without changing the position of the stack pointer  <a href="#a5dc0bb461102577a7f9e4384dc77e219"></a><br/></td></tr>
<tr class="separator:a5dc0bb461102577a7f9e4384dc77e219"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a482848f3de765f68a86d27708b0f4f43"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d4d/class_hardware_1_1_w65_c02_a482848f3de765f68a86d27708b0f4f43.htm#a482848f3de765f68a86d27708b0f4f43">PokeStack</a> (byte value)</td></tr>
<tr class="memdesc:a482848f3de765f68a86d27708b0f4f43"><td class="mdescLeft">&#160;</td><td class="mdescRight">Write a value directly to the stack without modifying the Stack Pointer  <a href="#a482848f3de765f68a86d27708b0f4f43"></a><br/></td></tr>
<tr class="separator:a482848f3de765f68a86d27708b0f4f43"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a27250f30d6cccc5b8300edf952b16769"><td class="memItemLeft" align="right" valign="top">static byte&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d4d/class_hardware_1_1_w65_c02_a27250f30d6cccc5b8300edf952b16769.htm#a27250f30d6cccc5b8300edf952b16769">ConvertFlagsToByte</a> (bool setBreak)</td></tr>
<tr class="memdesc:a27250f30d6cccc5b8300edf952b16769"><td class="mdescLeft">&#160;</td><td class="mdescRight">Coverts the Flags into its byte representation.  <a href="#a27250f30d6cccc5b8300edf952b16769"></a><br/></td></tr>
<tr class="separator:a27250f30d6cccc5b8300edf952b16769"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2d936ce70650fc2c97b81007ab0de291"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d4d/class_hardware_1_1_w65_c02_a2d936ce70650fc2c97b81007ab0de291.htm#a2d936ce70650fc2c97b81007ab0de291">SetDisassembly</a> ()</td></tr>
<tr class="separator:a2d936ce70650fc2c97b81007ab0de291"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a589c4ecc70423d82f4aba863f463fa93"><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d4d/class_hardware_1_1_w65_c02_a589c4ecc70423d82f4aba863f463fa93.htm#a589c4ecc70423d82f4aba863f463fa93">WrapProgramCounter</a> (int value)</td></tr>
<tr class="separator:a589c4ecc70423d82f4aba863f463fa93"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a15a3d646c43c36d2fb84ce2802a2e840"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="../../d6/d5f/namespace_hardware_a20ed8885928dd1f3f9eac50507a162fc.htm#a20ed8885928dd1f3f9eac50507a162fc">AddressingMode</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d4d/class_hardware_1_1_w65_c02_a15a3d646c43c36d2fb84ce2802a2e840.htm#a15a3d646c43c36d2fb84ce2802a2e840">GetAddressingMode</a> ()</td></tr>
<tr class="separator:a15a3d646c43c36d2fb84ce2802a2e840"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a85787889832bbcc6f18ad7cfdbe7ded9"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d4d/class_hardware_1_1_w65_c02_a85787889832bbcc6f18ad7cfdbe7ded9.htm#a85787889832bbcc6f18ad7cfdbe7ded9">AndOperation</a> (<a class="el" href="../../d6/d5f/namespace_hardware_a20ed8885928dd1f3f9eac50507a162fc.htm#a20ed8885928dd1f3f9eac50507a162fc">AddressingMode</a> addressingMode)</td></tr>
<tr class="memdesc:a85787889832bbcc6f18ad7cfdbe7ded9"><td class="mdescLeft">&#160;</td><td class="mdescRight">The AND - Compare Memory with Accumulator operation  <a href="#a85787889832bbcc6f18ad7cfdbe7ded9"></a><br/></td></tr>
<tr class="separator:a85787889832bbcc6f18ad7cfdbe7ded9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0c48828728d298df54ec4dcc78d8693f"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d4d/class_hardware_1_1_w65_c02_a0c48828728d298df54ec4dcc78d8693f.htm#a0c48828728d298df54ec4dcc78d8693f">BranchOperation</a> (bool performBranch)</td></tr>
<tr class="memdesc:a0c48828728d298df54ec4dcc78d8693f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs the different branch operations.  <a href="#a0c48828728d298df54ec4dcc78d8693f"></a><br/></td></tr>
<tr class="separator:a0c48828728d298df54ec4dcc78d8693f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1d332153668d0bcecf092d348965a95c"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d4d/class_hardware_1_1_w65_c02_a1d332153668d0bcecf092d348965a95c.htm#a1d332153668d0bcecf092d348965a95c">BitOperation</a> (<a class="el" href="../../d6/d5f/namespace_hardware_a20ed8885928dd1f3f9eac50507a162fc.htm#a20ed8885928dd1f3f9eac50507a162fc">AddressingMode</a> addressingMode)</td></tr>
<tr class="memdesc:a1d332153668d0bcecf092d348965a95c"><td class="mdescLeft">&#160;</td><td class="mdescRight">The bit operation, does an &amp; comparison between a value in memory and the accumulator  <a href="#a1d332153668d0bcecf092d348965a95c"></a><br/></td></tr>
<tr class="separator:a1d332153668d0bcecf092d348965a95c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a06ebedef93c9f255af8fef6ca21229a0"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d4d/class_hardware_1_1_w65_c02_a06ebedef93c9f255af8fef6ca21229a0.htm#a06ebedef93c9f255af8fef6ca21229a0">CompareOperation</a> (<a class="el" href="../../d6/d5f/namespace_hardware_a20ed8885928dd1f3f9eac50507a162fc.htm#a20ed8885928dd1f3f9eac50507a162fc">AddressingMode</a> addressingMode, int comparisonValue)</td></tr>
<tr class="memdesc:a06ebedef93c9f255af8fef6ca21229a0"><td class="mdescLeft">&#160;</td><td class="mdescRight">The compare operation. This operation compares a value in memory with a value passed into it.  <a href="#a06ebedef93c9f255af8fef6ca21229a0"></a><br/></td></tr>
<tr class="separator:a06ebedef93c9f255af8fef6ca21229a0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae3269b20eaf61b3f3b64aab9f5e7a28d"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d4d/class_hardware_1_1_w65_c02_ae3269b20eaf61b3f3b64aab9f5e7a28d.htm#ae3269b20eaf61b3f3b64aab9f5e7a28d">ChangeMemoryByOne</a> (<a class="el" href="../../d6/d5f/namespace_hardware_a20ed8885928dd1f3f9eac50507a162fc.htm#a20ed8885928dd1f3f9eac50507a162fc">AddressingMode</a> addressingMode, bool decrement)</td></tr>
<tr class="memdesc:ae3269b20eaf61b3f3b64aab9f5e7a28d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Changes a value in memory by 1  <a href="#ae3269b20eaf61b3f3b64aab9f5e7a28d"></a><br/></td></tr>
<tr class="separator:ae3269b20eaf61b3f3b64aab9f5e7a28d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac76fc42fcb62131a8e062d368e2f3357"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d4d/class_hardware_1_1_w65_c02_ac76fc42fcb62131a8e062d368e2f3357.htm#ac76fc42fcb62131a8e062d368e2f3357">ChangeRegisterByOne</a> (bool useXRegister, bool decrement)</td></tr>
<tr class="memdesc:ac76fc42fcb62131a8e062d368e2f3357"><td class="mdescLeft">&#160;</td><td class="mdescRight">Changes a value in either the X or Y register by 1  <a href="#ac76fc42fcb62131a8e062d368e2f3357"></a><br/></td></tr>
<tr class="separator:ac76fc42fcb62131a8e062d368e2f3357"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a52720dd889807ea5aca75e62563c991b"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d4d/class_hardware_1_1_w65_c02_a52720dd889807ea5aca75e62563c991b.htm#a52720dd889807ea5aca75e62563c991b">EorOperation</a> (<a class="el" href="../../d6/d5f/namespace_hardware_a20ed8885928dd1f3f9eac50507a162fc.htm#a20ed8885928dd1f3f9eac50507a162fc">AddressingMode</a> addressingMode)</td></tr>
<tr class="memdesc:a52720dd889807ea5aca75e62563c991b"><td class="mdescLeft">&#160;</td><td class="mdescRight">The EOR Operation, Performs an Exclusive OR Operation against the Accumulator and a value in memory  <a href="#a52720dd889807ea5aca75e62563c991b"></a><br/></td></tr>
<tr class="separator:a52720dd889807ea5aca75e62563c991b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aecf6207eaae16edd0bf6b41c21681f19"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d4d/class_hardware_1_1_w65_c02_aecf6207eaae16edd0bf6b41c21681f19.htm#aecf6207eaae16edd0bf6b41c21681f19">LsrOperation</a> (<a class="el" href="../../d6/d5f/namespace_hardware_a20ed8885928dd1f3f9eac50507a162fc.htm#a20ed8885928dd1f3f9eac50507a162fc">AddressingMode</a> addressingMode)</td></tr>
<tr class="memdesc:aecf6207eaae16edd0bf6b41c21681f19"><td class="mdescLeft">&#160;</td><td class="mdescRight">The LSR Operation. Performs a Left shift operation on a value in memory  <a href="#aecf6207eaae16edd0bf6b41c21681f19"></a><br/></td></tr>
<tr class="separator:aecf6207eaae16edd0bf6b41c21681f19"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abd2b839fd0578e6b7b8f8e9be1207f55"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d4d/class_hardware_1_1_w65_c02_abd2b839fd0578e6b7b8f8e9be1207f55.htm#abd2b839fd0578e6b7b8f8e9be1207f55">OrOperation</a> (<a class="el" href="../../d6/d5f/namespace_hardware_a20ed8885928dd1f3f9eac50507a162fc.htm#a20ed8885928dd1f3f9eac50507a162fc">AddressingMode</a> addressingMode)</td></tr>
<tr class="memdesc:abd2b839fd0578e6b7b8f8e9be1207f55"><td class="mdescLeft">&#160;</td><td class="mdescRight">The Or Operation. Performs an Or Operation with the accumulator and a value in memory  <a href="#abd2b839fd0578e6b7b8f8e9be1207f55"></a><br/></td></tr>
<tr class="separator:abd2b839fd0578e6b7b8f8e9be1207f55"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a359d912d63e28024ea322c8357159692"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d4d/class_hardware_1_1_w65_c02_a359d912d63e28024ea322c8357159692.htm#a359d912d63e28024ea322c8357159692">RolOperation</a> (<a class="el" href="../../d6/d5f/namespace_hardware_a20ed8885928dd1f3f9eac50507a162fc.htm#a20ed8885928dd1f3f9eac50507a162fc">AddressingMode</a> addressingMode)</td></tr>
<tr class="memdesc:a359d912d63e28024ea322c8357159692"><td class="mdescLeft">&#160;</td><td class="mdescRight">The ROL operation. Performs a rotate left operation on a value in memory.  <a href="#a359d912d63e28024ea322c8357159692"></a><br/></td></tr>
<tr class="separator:a359d912d63e28024ea322c8357159692"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7981078f501e2860a6a3b66b4e644268"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d4d/class_hardware_1_1_w65_c02_a7981078f501e2860a6a3b66b4e644268.htm#a7981078f501e2860a6a3b66b4e644268">RorOperation</a> (<a class="el" href="../../d6/d5f/namespace_hardware_a20ed8885928dd1f3f9eac50507a162fc.htm#a20ed8885928dd1f3f9eac50507a162fc">AddressingMode</a> addressingMode)</td></tr>
<tr class="memdesc:a7981078f501e2860a6a3b66b4e644268"><td class="mdescLeft">&#160;</td><td class="mdescRight">The ROR operation. Performs a rotate right operation on a value in memory.  <a href="#a7981078f501e2860a6a3b66b4e644268"></a><br/></td></tr>
<tr class="separator:a7981078f501e2860a6a3b66b4e644268"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeb3183e96818fb11b2460773907262d8"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d4d/class_hardware_1_1_w65_c02_aeb3183e96818fb11b2460773907262d8.htm#aeb3183e96818fb11b2460773907262d8">PushFlagsOperation</a> ()</td></tr>
<tr class="memdesc:aeb3183e96818fb11b2460773907262d8"><td class="mdescLeft">&#160;</td><td class="mdescRight">The PSP Operation. Pushes the Status Flags to the stack  <a href="#aeb3183e96818fb11b2460773907262d8"></a><br/></td></tr>
<tr class="separator:aeb3183e96818fb11b2460773907262d8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4fc70b35726502d858ded23a12664413"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d4d/class_hardware_1_1_w65_c02_a4fc70b35726502d858ded23a12664413.htm#a4fc70b35726502d858ded23a12664413">PullFlagsOperation</a> ()</td></tr>
<tr class="memdesc:a4fc70b35726502d858ded23a12664413"><td class="mdescLeft">&#160;</td><td class="mdescRight">The PLP Operation. Pull the status flags off the stack on sets the flags accordingly.  <a href="#a4fc70b35726502d858ded23a12664413"></a><br/></td></tr>
<tr class="separator:a4fc70b35726502d858ded23a12664413"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aba9396ab680501b1955a11a481a18ed9"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d4d/class_hardware_1_1_w65_c02_aba9396ab680501b1955a11a481a18ed9.htm#aba9396ab680501b1955a11a481a18ed9">JumpToSubRoutineOperation</a> ()</td></tr>
<tr class="memdesc:aba9396ab680501b1955a11a481a18ed9"><td class="mdescLeft">&#160;</td><td class="mdescRight">The JSR routine. Jumps to a subroutine.  <a href="#aba9396ab680501b1955a11a481a18ed9"></a><br/></td></tr>
<tr class="separator:aba9396ab680501b1955a11a481a18ed9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8a830f2cb46e1c93a8a4338b13115976"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d4d/class_hardware_1_1_w65_c02_a8a830f2cb46e1c93a8a4338b13115976.htm#a8a830f2cb46e1c93a8a4338b13115976">ReturnFromSubRoutineOperation</a> ()</td></tr>
<tr class="memdesc:a8a830f2cb46e1c93a8a4338b13115976"><td class="mdescLeft">&#160;</td><td class="mdescRight">The RTS routine. Called when returning from a subroutine.  <a href="#a8a830f2cb46e1c93a8a4338b13115976"></a><br/></td></tr>
<tr class="separator:a8a830f2cb46e1c93a8a4338b13115976"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa107e2aed83b39c87a3a43838a4ac502"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d4d/class_hardware_1_1_w65_c02_aa107e2aed83b39c87a3a43838a4ac502.htm#aa107e2aed83b39c87a3a43838a4ac502">BreakOperation</a> (bool isBrk, int vector)</td></tr>
<tr class="memdesc:aa107e2aed83b39c87a3a43838a4ac502"><td class="mdescLeft">&#160;</td><td class="mdescRight">The BRK routine. Called when a BRK occurs.  <a href="#aa107e2aed83b39c87a3a43838a4ac502"></a><br/></td></tr>
<tr class="separator:aa107e2aed83b39c87a3a43838a4ac502"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa9335390a3a78934e74c5b728c250b12"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d4d/class_hardware_1_1_w65_c02_aa9335390a3a78934e74c5b728c250b12.htm#aa9335390a3a78934e74c5b728c250b12">ReturnFromInterruptOperation</a> ()</td></tr>
<tr class="memdesc:aa9335390a3a78934e74c5b728c250b12"><td class="mdescLeft">&#160;</td><td class="mdescRight">The RTI routine. Called when returning from a BRK opertion. Note: when called after a BRK operation the Program Counter is not set to the location after the BRK, it is set +1  <a href="#aa9335390a3a78934e74c5b728c250b12"></a><br/></td></tr>
<tr class="separator:aa9335390a3a78934e74c5b728c250b12"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a73a9f6eac18428eed901c758777757bc"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d4d/class_hardware_1_1_w65_c02_a73a9f6eac18428eed901c758777757bc.htm#a73a9f6eac18428eed901c758777757bc">ProcessNMI</a> ()</td></tr>
<tr class="memdesc:a73a9f6eac18428eed901c758777757bc"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is ran anytime an NMI occurrs  <a href="#a73a9f6eac18428eed901c758777757bc"></a><br/></td></tr>
<tr class="separator:a73a9f6eac18428eed901c758777757bc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2ab958a2f86cd88f637d7fa0034bc49a"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d4d/class_hardware_1_1_w65_c02_a2ab958a2f86cd88f637d7fa0034bc49a.htm#a2ab958a2f86cd88f637d7fa0034bc49a">ProcessIRQ</a> ()</td></tr>
<tr class="memdesc:a2ab958a2f86cd88f637d7fa0034bc49a"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is ran anytime an IRQ occurrs  <a href="#a2ab958a2f86cd88f637d7fa0034bc49a"></a><br/></td></tr>
<tr class="separator:a2ab958a2f86cd88f637d7fa0034bc49a"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-static-attribs"></a>
Static Private Attributes</h2></td></tr>
<tr class="memitem:a80966ec7e9c6dba1f3586ed0e9f80cc1"><td class="memItemLeft" align="right" valign="top">static readonly ILogger&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d4d/class_hardware_1_1_w65_c02_a80966ec7e9c6dba1f3586ed0e9f80cc1.htm#a80966ec7e9c6dba1f3586ed0e9f80cc1">_logger</a> = LogManager.GetLogger(&quot;Processor&quot;)</td></tr>
<tr class="separator:a80966ec7e9c6dba1f3586ed0e9f80cc1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae180656bffc65257a3656e69f63aee79"><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d4d/class_hardware_1_1_w65_c02_ae180656bffc65257a3656e69f63aee79.htm#ae180656bffc65257a3656e69f63aee79">_programCounter</a></td></tr>
<tr class="separator:ae180656bffc65257a3656e69f63aee79"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a42a8b12df740a0135197860cc854ceed"><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d4d/class_hardware_1_1_w65_c02_a42a8b12df740a0135197860cc854ceed.htm#a42a8b12df740a0135197860cc854ceed">_stackPointer</a></td></tr>
<tr class="separator:a42a8b12df740a0135197860cc854ceed"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1887c3c32e8f0916851b15c376fd6f88"><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d4d/class_hardware_1_1_w65_c02_a1887c3c32e8f0916851b15c376fd6f88.htm#a1887c3c32e8f0916851b15c376fd6f88">_cycleCount</a></td></tr>
<tr class="separator:a1887c3c32e8f0916851b15c376fd6f88"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af27df02bea5ab70320301aa322bdf50a"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d4d/class_hardware_1_1_w65_c02_af27df02bea5ab70320301aa322bdf50a.htm#af27df02bea5ab70320301aa322bdf50a">_previousInterrupt</a></td></tr>
<tr class="separator:af27df02bea5ab70320301aa322bdf50a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4e01ed5f12d89a4f323afbf661a9e348"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d4d/class_hardware_1_1_w65_c02_a4e01ed5f12d89a4f323afbf661a9e348.htm#a4e01ed5f12d89a4f323afbf661a9e348">_interrupt</a></td></tr>
<tr class="separator:a4e01ed5f12d89a4f323afbf661a9e348"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>An implementation of a <a class="el" href="../../db/d4d/class_hardware_1_1_w65_c02.htm" title="An implementation of a W65C02 Processor. ">W65C02</a> Processor. </p>

<p>Definition at line <a class="el" href="../../d0/d5b/_w65_c02_8cs_source.htm#l00013">13</a> of file <a class="el" href="../../d0/d5b/_w65_c02_8cs_source.htm">W65C02.cs</a>.</p>
</div><hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="../../d0/d5b/_w65_c02_8cs_source.htm">W65C02.cs</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../d6/d5f/namespace_hardware.htm">Hardware</a></li><li class="navelem"><a class="el" href="../../db/d4d/class_hardware_1_1_w65_c02.htm">W65C02</a></li>
    <li class="footer">Generated on Fri Sep 9 2022 23:07:54 for WolfNet 6502 WorkBench Computer Emulator by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.3 </li>
  </ul>
</div>
</body>
</html>
